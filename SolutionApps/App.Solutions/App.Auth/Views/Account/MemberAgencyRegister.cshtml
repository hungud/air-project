@model register_functionlity.DB.Model.UserModel
@{
    ViewBag.Title = "Register";
    Layout = "~/Views/Shared/_MasterLayoutMain.cshtml";
}


<div class="row">
    <div class="col-xs-12 col-sm-12">
        <div class="widget-body">
            <div class="widget-main">
                <div class="row">
                    <div class="container">
					<div class="member-section">

                        <h2>@ViewBag.Title</h2>

                        @using (Html.BeginForm("MemberAgencyRegister", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                        {

                            <input type="hidden" name="CompanyType" id="hdCompanyType" />
                            <input type="hidden" name="ParentCompanyID" id="ParentCompanyID" />
                           

                            @Html.ValidationSummary("", new { @class = "text-danger" })
                            IDictionary<string, Object> txtAttrs = new Dictionary<string, Object>();

                            txtAttrs["class"] = "form-control";

                            <div class="col-md-12 main-user-container">
                                <h3>
                                    User Detail
                                    @Html.HiddenFor(m => m.CompanyDetailId)
                                </h3>
                              

                                <div class="form-group">
                                    @Html.LabelFor(m => m.FirstName, new { @class = " control-label" })
                                    <div class="">
                                        @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", required = "required", placeholder = "First name" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.LastName, new { @class = "control-label" })
                                    <div class="">
                                        @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", required = "required", placeholder = "Last Name" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ContactNumber, new { @class = " control-label" })
                                    <div class="">
                                        @Html.TextBoxFor(m => m.ContactNumber, new { @class = "form-control", required = "required", placeholder = "4404231450", pattern = ".{10,10}" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.EmailAddress, new { @class = " control-label" })
                                    <div class="">
                                        @Html.TextBoxFor(m => m.EmailAddress, new { @class = "form-control", required = "required", placeholder = "Username@domain.com" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Password, new { @class = " control-label" })
                                    <div class="">
                                        @Html.PasswordFor(m => m.Password, new { @class = "form-control", required = "required", placeholder = "*********" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ConfirmPassword, new { @class = " control-label" })
                                    <div class="">
                                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", required = "required", placeholder = "*********" })
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    <input name="btnSubmit" type="submit" class="btn btnSubmit btn-default" value="Register" />
                                </div>
                            </div>
							
                        }
						</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
$(document).ready(function() {
    var CompanyType = sessionStorage.getItem("CompanyTypeId");
    var ParentCompanyID = sessionStorage.getItem("Id");
    $('#hdCompanyType').val(CompanyType);
    $('#ParentCompanyID').val(ParentCompanyID);


});
</script>

<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDPKyEPE8dWcr14Y7T1_2WZhuXK4DJKQEs"></script>
<script type="text/javascript">

        google.maps.event.addDomListener(window, 'load', function () {
            var input = document.getElementById('selBCICountry');
            var places = new google.maps.places.Autocomplete(input);

            places.addListener('place_changed', function () {
                var Country = "";
                var City = "";
                var result = places.getPlace();

                for (var i = 0; i < result.address_components.length; i += 1) {
                    var addressObj = result.address_components[i];
                    for (var j = 0; j < addressObj.types.length; j += 1) {
                        if (addressObj.types[j] === 'country') {
                            console.log('country : ' + addressObj.long_name); // confirm that this is the country name
                            Country = addressObj.long_name;
                        }
                        if (addressObj.types[j] === 'administrative_area_level_1') {
                            console.log('state : ' + addressObj.long_name); // confirm that this is the state name
                        }
                        if (addressObj.types[j] === 'locality') {
                            console.log('city : ' + addressObj.long_name); // confirm that this is the city name
                            City = addressObj.long_name;
                        }
                    }
                }
                //$('#selBCICountry').val(City+" , "+Country);
            });

        });
</script>  